import Head from "next/head";
import { useEffect } from "react";
import { useRouter } from "next/router";

import algosdk from "algosdk"

import { useGlobalContext } from "../components/context";
import Header from "../components/header";
import defaultRewardArray from "../components/defaultRewardArray";
import { useState } from "react/cjs/react.production.min";

// Variables needed to connect to the algorand testnet
const baseServer = "https://testnet-algorand.api.purestake.io/ps2";
const port = "";
const token = {
  "X-API-key": process.env.PURESTAKE_API_KEY,
};

// Take the above variables and make a connection to Algorand testnet
// using the algosdk 
let algodClient = new algosdk.Algodv2(token, baseServer, port);

// Get account mnemonic using the seed phrase
const recoveredAccount = algosdk.mnemonicToSecretKey(process.env.SEED_PHRASE);


export default function Proposals() {
  const router = useRouter();

  // import the variables fromt he global context file 
  // Located at /components/context.js
  const {
    setPropsObj,
    walletAddress,
    setWalletAddress,
    name,
    setName,
    discordID,
    setDiscordID,
    githubURL,
    setGithubURL,
    twitterHandle,
    setTwitterHandle,
  } = useGlobalContext();

const [addressArray, setAddressArray]= useState([])
const [amount, setAmount] = useState(0)

  const processPaymentTransaction = async (_address:string) =>{
try{
 let params = await algodClient.getTransactionParams().do();

 let amount = Math.floor(Math.random() * 1000);
 var mnemonic =
   "code thrive mouse code badge example pride stereo sell viable adjust planet text close erupt embrace nature upon february weekend humble surprise shrug absorb faint";

 let txn = {
   from: recoveredAccount.addr,
   to: "UUOB7ZC2IEE4A7JO4WY4TXKXWDFNATM43TL73IZRAFIFFOE6ORPKC7Q62E",
   fee: 1,
   amount: amount,
   firstRound: params.firstRound,
   lastRound: params.lastRound,
   genesisID: params.genesisID,
   genesisHash: params.genesisHash,
   note: new Uint8Array(0),
 };

 let signedTxn = algosdk.signTransaction(txn, recoveredAccount.sk);
 let sendTx = await algodClient.sendRawTransaction(signedTxn.blob).do();

 console.log("Transaction : " + sendTx.txId);
}
catch(err){
  console.log("Failed to process transaction: ", err)
}
  }

  useEffect(() => {
    let storage = localStorage.getItem("rewardsList");
    if (!storage) {
      localStorage.setItem("rewardsList", JSON.stringify(defaultRewardArray));
      storage = localStorage.getItem("rewardsList");
    }
    setPropsObj(JSON.parse(storage));
  }, []);
  const handleSubmit = (e) => {
    e.preventDefault();
    console.log({ name, discordID, githubURL, twitterHandle, walletAddress });
    // router.push("/");
  };

  return (
    <>
      <Head>
        <title>Pay</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />

      <section className={`pt-4  text-gray-900 flex items-center flex-col`}>
        <div className="flex justify-evenly text-3xl mb-4 uppercase w-full text-center">
          Pay Active Participants
        </div>
        <form className="flex items-center justify-center flex-col space-y-10">
          <textarea onChange={(e)=>setAddressArray(e.target.value)}
            className=""
            placeholder="Copy and paste a list of addresses here"
          ></textarea>

          <span className="space-y-3 flex">
            <p>Choice Amount :</p>{" "}
            <input
            onChange={(e)=>setAmount(e.target.value)}
              type="number"
              className="outline-none border-2 border-gray-700 px-2"
            />
          </span>
          <input
            type="submit"
            value="Pay"
            className="border-2 border-gray-500 hover:border-gray-900 hover:shadow-lg cursor-pointer p-2"
          />
        </form>
      </section>
    </>
  );
}
